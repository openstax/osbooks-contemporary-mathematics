<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Trees</title>
  <metadata xmlns:md="http://cnx.rice.edu/mdml">
    <md:title>Trees</md:title>
    <md:content-id>m00124</md:content-id>
    <md:uuid>2606813f-260c-4610-a668-7d4de5b8b236</md:uuid>
  </metadata>
  <content>
    <figure id="fig-00001">
    <media alt="A row of trees with no leaves.">
    <image mime-type="image/jpg" src="../../media/CS_Photo_12_10_001.jpg"/>
    </media>
    <caption>In graph theory, graphs known as trees have structures in common with live trees. (credit: “Row of trees in Roslev” by AKA CJ/Flickr, Public Domain)</caption>
    </figure>
    <section class="learning-objectives" id="sect-00001">
    <title>Learning Objectives</title>
    <para id="para-00001">After completing this section, you should be able to: </para>
    <list list-type="enumerated" number-style="arabic" id="list-00001">
    <item>Describe and identify trees.</item>
    <item>Determine a spanning tree for a connected graph.</item>
    <item>Find the minimum spanning tree for a weighted graph.</item>
    <item>Solve application problems involving trees.</item>
    </list>
    </section>
    <para id="para-00002">We saved the best for last! In this last section, we will discuss arguably the most fun kinds of graphs, trees. Have you every researched your family tree? Family trees are a perfect example of the kind of trees we study in graph theory. One of the characteristics of a family tree graph is that it never loops back around, because no one is their own grandparent!</para>
    <section id="sect-00002">
    <title>What Is A Tree?</title>
    <para id="para-00003">Whether we are talking about a family tree or a tree in a forest, none of the branches ever loops back around and rejoins the trunk. This means that a <term id="term-00001">tree</term> has no cyclic subgraphs, or is <term id="term-00002">acyclic</term>. A tree also has only one component. So, a tree is a connected acyclic graph. Here are some graphs that have the same characteristic. Each of the graphs in <link target-id="fig-00002" document="m00124"/> is a tree.</para>
    <figure id="fig-00002">
    <media alt="Three graphs. Graph T has 15 vertices. The edges are as follows: a b, b c, c d, c i, i j, j k, k o, d e, d l, e n, e m, b f, f g, and g h. Graph P has 6 vertices. The edges are as follows: t s, s r, r q, q p, and p o. Graph S has 7 vertices. The edges are as follows: u t, u v, u w, u x, u y, and u z.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_244.png"/>
    </media>
    <caption>Graphs <emphasis effect="italic">T</emphasis>, <emphasis effect="italic">P</emphasis>, and <emphasis effect="italic">S</emphasis></caption>
    </figure>
    <para id="para-00004">Let’s practice determining whether a graph is a tree. To do this, check if a graph is connected and has no cycles.</para>
    <example id="exam-00001">
    <title>Identifying Trees</title>
    <exercise id="exer-00001">
    <problem id="prob-00001">
    <para id="para-00005">Identify any trees in <link target-id="fig-00003" document="m00124"/>. If a graph is not a tree, explain how you know.</para>
    <figure id="fig-00003">
    <media alt="Three graphs. Graph M has 7 vertices. The edges are a b, b f, f g, f c, b c, b d, and d e. Graph N has 6 vertices. The edges are I j, I h, l k, and l m. The edges, I j, and l k intersect each other. Graph P has 6 vertices. The edges are s t, s r, r q, q p, and p o.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_245.png"/>
    </media>
    <caption>Graphs <emphasis effect="italic">M</emphasis>, <emphasis effect="italic">N</emphasis>, and <emphasis effect="italic">P</emphasis></caption>
    </figure>
    </problem>
    <solution id="sol-00001">
    <list bullet-style="bulleted" id="list-00002">
    <item>Graph <emphasis effect="italic">M</emphasis> is not a tree because it contains the cycle (<emphasis effect="italic">b</emphasis>, <emphasis effect="italic">c</emphasis>, <emphasis effect="italic">f</emphasis>).</item>
    <item xmlns="http://cnx.rice.edu/cnxml">Graph <emphasis effect="italic">N</emphasis> is not a tree because it is not connected. It has two components, one with vertices <emphasis effect="italic">h, i, j</emphasis>, and another with vertices <emphasis effect="italic">k, l, m</emphasis>.</item>
    <item>Graph <emphasis effect="italic">P</emphasis> is a tree. It has no cycles and it is connected.</item>
    </list>
    </solution>
    </exercise>
    </example>
    <note class="your-turn" id="note-00001">
    <exercise id="exer-00002">
    <problem id="prob-00002">
    <para id="para-00006"><link class="os-embed" url="#exercise/CM-C12-M10-Q001"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00003">
    <title>Types of Trees</title>
    <para id="para-00007">Mathematicians have had a lot of fun naming graphs that are trees or that contain trees. For example, the graph in <link target-id="fig-00004" document="m00124"/> is not a tree, but it contains two components, one containing vertices <emphasis effect="italic">a</emphasis> through <emphasis effect="italic">d</emphasis>, and the other containing vertices <emphasis effect="italic">e</emphasis> through <emphasis effect="italic">g</emphasis>, each of which would be a tree on its own. This type of structure is called a <term id="term-00003">forest</term>. There are also interesting names for trees with certain characteristics.</para>
    <list bullet-style="bulleted" id="list-00003">
    <item>A <emphasis effect="bold">path graph or linear graph </emphasis> is a tree graph that has exactly two vertices of degree 1 such that the only other vertices form a single path between them, which means that it can be drawn as a straight line.</item>
    <item>A <emphasis effect="bold">star tree</emphasis> is a tree that has exactly one vertex of degree greater than 1 called a <emphasis effect="bold">root,</emphasis> and all other vertices are adjacent to it.</item>
    <item>A <emphasis effect="bold">starlike tree</emphasis> is a tree that has a single <emphasis effect="bold">root </emphasis> and several paths attached to it.</item>
    <item>A <emphasis effect="bold">caterpillar tree</emphasis> is a tree that has a central path that can have vertices of any degree, with each vertex not on the central path being adjacent to a vertex on the central path and having a degree of one.</item>
    <item>A <emphasis effect="bold">lobster tree</emphasis> is a tree that has a central path that can have vertices of any degree, with paths consisting of either one or two edges attached to the central path.</item>
    </list>
    <para id="para-00008">Examples of each of these types of structures are given in <link target-id="fig-00005" document="m00124"/>.</para>
    <figure id="fig-00004">
    <media alt="Graph F has 8 vertices. The vertices are labeled a to h. Edges connect b a, b d, b c, f e, f h, and f g.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_247.png"/>
    </media>
    <caption>Forest Graph F</caption>
    </figure>
    <figure id="fig-00005">
    <media alt="Six graphs. Graph S has 7 vertices. The edges are a b, b f, f g, f c, b c, b d, and d e. Graph N has 6 vertices. The edges are I j, I h, l k, and l m. The edges, I j, and l k intersect each other. Graph P has 6 vertices. The edges are s t, s r, r q, q p, and p o. Graph Z has 12 vertices. The edges are a b, a c, a d, a e, a f, a g, a h, h i, c j, e k, and k l. Graph C has 14 vertices. The edges are m n, n z, n o, o r, o p, o x, o y, p y, p x, p s, p t, p u, p q, p v, and p w. Graph L has 26 vertices. The edges are f q, f t, f s, f e, e o, e p, p z, e d, d m, m v, d n, n y, d c, c k, k u, c l, l k, c b, b i, i t, b j, j w, b a, b g, and b h.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_248a.png"/>
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_248b.png"/>
    </media>
    <caption>Six Types of Trees</caption>
    </figure>
    <example id="exam-00002">
    <title>Identifying Types of Trees</title>
    <exercise id="exer-00003">
    <problem id="prob-00003">
    <para id="para-00009">Each graph in <link target-id="fig-00007" document="m00124"/> is one of the special types of trees we have been discussing. Identify the type of tree.</para>
    <figure id="fig-00007">
    <media alt="Two graphs. Graph U has 17 vertices. The edges are o q, o p, o l, l n, l k, l m, l i, I j, I f, f g, f h, f d, d e, f b, b c, and b a. Graph V hs 6 vertices. The edges are r s, s t, t u, u v, and v w. The edges, s t and u v intersect.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_249.png"/>
    </media>
    <caption>Graphs <emphasis effect="italics">U</emphasis> and <emphasis effect="italics">V</emphasis></caption>
    </figure>
    </problem>
    <solution id="sol-00002">
    <para id="para-00010">Graph <emphasis effect="italic">U</emphasis> has a central path <emphasis effect="italic">a</emphasis> → <emphasis effect="italic">b</emphasis> → <emphasis effect="italic">d</emphasis> → <emphasis effect="italic">f</emphasis> → <emphasis effect="italic">i</emphasis> → <emphasis effect="italic">l</emphasis> → <emphasis effect="italic">o</emphasis> → <emphasis effect="italic">q</emphasis>. Each vertex that is not on the path has degree 1 and is adjacent to a vertex that is on the path. So, <emphasis effect="italic">U</emphasis> is a caterpillar tree.</para>
    <para id="para-00011" xmlns="http://cnx.rice.edu/cnxml">Graph <emphasis effect="italic">V</emphasis> is a path graph because it is a single path connecting exactly two vertices of degree one, <emphasis effect="italic">r</emphasis> → <emphasis effect="italic">s</emphasis> → <emphasis effect="italic">u</emphasis> → <emphasis effect="italic">v</emphasis> → <emphasis effect="italic">w</emphasis>.</para>
    </solution>
    </exercise>
    </example>
    <note class="your-turn" id="note-00002" xmlns="http://cnx.rice.edu/cnxml">
    <exercise id="exer-00004">
    <problem id="prob-00004">
    <para id="para-00012"><link class="os-embed" url="#exercise/CM-C12-M10-Q002"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00004">
    <title>Characteristics of Trees</title>
    <para id="para-00013">As we study trees, it is helpful to be familiar with some of their characteristics. For example, if you add an edge to a tree graph between any two existing vertices, you will create a cycle, and the resulting graph is no longer a tree. Some examples are shown in <link target-id="fig-00008" document="m00124"/>. Adding edge <emphasis effect="italic">bj</emphasis> to Graph <emphasis effect="italic">T</emphasis> creates cycle (<emphasis effect="italic">b</emphasis>, <emphasis effect="italic">c</emphasis>, <emphasis effect="italic">i</emphasis>, <emphasis effect="italic">j</emphasis>). Adding edge <emphasis effect="italic" xmlns="http://cnx.rice.edu/cnxml">rt</emphasis> to Graph <emphasis effect="italic">P</emphasis> creates cycle (<emphasis effect="italic">r</emphasis>, <emphasis effect="italic">s</emphasis>, <emphasis effect="italic">t</emphasis>). Adding edge <emphasis effect="italic" xmlns="http://cnx.rice.edu/cnxml">tv</emphasis> to Graph <emphasis effect="italic">S</emphasis> creates cycle (<emphasis effect="italic">t</emphasis>, <emphasis effect="italic">u</emphasis>, <emphasis effect="italic">v</emphasis>).</para>
    <figure id="fig-00008" xmlns="http://cnx.rice.edu/cnxml">
    <media alt="Three graphs. Graph T has 15 vertices. The edges are as follows: a b, b c, c d, c i, i j, j k, k o, d e, d l, e n, e m, b f, f g, and g h. The edges, c i, and i j are in blue. A dashed edge connects b and j. Graph P has 6 vertices. The edges are as follows: t s, s r, r q, q p, and p o. The edges, t s, and s r are in blue. A dashed edge connects t and r. Graph S has 7 vertices. The edges are as follows: u t, u v, u w, u x, u y, and u z. The edges, u t, and u v are in blue. A dashed edge connects t and v.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_250.png"/>
    </media>
    <caption>Adding Edges to Trees</caption>
    </figure>
    <para id="para-00014">It is also true that removing an edge from a tree graph will increase the number of components and the graph will no longer be connected. In fact, you can see in <link target-id="fig-00009" document="m00124"/> that removing one or more edges can create a forest. Removing edge <emphasis effect="italic">qr</emphasis> from Graph <emphasis effect="italic">P</emphasis> creates a graph with two components, one with vertices <emphasis effect="italic">o, p</emphasis> and <emphasis effect="italic">q</emphasis>, and the other with vertices <emphasis effect="italic">r, s</emphasis>, and <emphasis effect="italic">t</emphasis>. Removing edge <emphasis effect="italic">uw</emphasis> from Graph <emphasis effect="italic">S</emphasis> creates two components, one with just vertex <emphasis effect="italic">w</emphasis> and the other with the rest of the vertices. When two edges were removed from Graph <emphasis effect="italic">T</emphasis>, edge <emphasis effect="italic">bf</emphasis> and edge <emphasis effect="italic">cd</emphasis>, creates a graph with three components as shown in <link target-id="fig-00009" document="m00124"/>.</para>
    <figure id="fig-00009">
    <media alt="Three graphs. Graph T has 15 vertices. The edges are as follows: a b, b c, c d, c i, i j, j k, k o, d e, d l, e n, e m, b f, f g, and g h. The edges, d c, and b f are in dashed lines. The graph is separated into three blocks. Graph P has 6 vertices. The edges are as follows: t s, s r, r q, q p, and p o. The edge, q r is in dashed lines. The graph is separated into two blocks. Graph S has 7 vertices. The edges are as follows: u t, u v, u w, u x, u y, and u z. The edge, u w is in dashed lines. The graph is separated into two blocks.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_251.png"/>
    </media>
    <caption>Removing Edges from Trees</caption>
    </figure>
    <para id="para-00015">A very useful characteristic of tree graphs is that the number of edges is always one less than the number of vertices. In fact, any connected graph in which the number of edges is one less than the number of vertices is guaranteed to be a tree. Some examples are given in <link target-id="fig-00010" document="m00124"/>.</para>
    <figure id="fig-00010">
    <media alt="Six graphs. Graph T has 15 vertices. The edges are as follows: a b, b c, c d, c i, i j, j k, k o, d e, d l, e n, e m, b f, f g, and g h. Graph P has 6 vertices. The edges are as follows: t s, s r, r q, q p, and p o. Graph S has 7 vertices. The edges are as follows: u t, u v, u w, u x, u y, and u z. Graph Z has 12 vertices. The edges are a b, a c, a d, a e, a f, a g, a h, h i, c j, e k, and k l. Graph C has 14 vertices. The edges are m n, n z, n o, o r, o p, o x, o y, p y, p x, p s, p t, p u, p q, p v, and p w. Graph L has 26 vertices. The edges are f q, f t, f s, f e, e o, e p, p z, e d, d m, m v, d n, n y, d c, c k, k u, c l, l k, c b, b i, i t, b j, j w, b a, b g, and b h.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_252.png"/>
    </media>
    <caption>Number of Vertices and Edges in Trees vs. Other Graphs</caption>
    </figure>
    <note class="formula" id="note-00003">
    <para id="para-00016">The number of edges in a tree graph with <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mi>n</mi></math> vertices is <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></math>.</para>
    <para id="para-00017" xmlns="http://cnx.rice.edu/cnxml">A connected graph with n vertices and <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></math> edges is a tree graph.</para>
    </note>
    <example id="exam-00003" xmlns="http://cnx.rice.edu/cnxml">
    <title>Exploring Characteristics of Trees</title>
    <exercise id="exer-00005">
    <problem id="prob-00005">
    <para id="para-00018">Use Graphs <emphasis effect="italic">I</emphasis> and <emphasis effect="italic">J</emphasis> in <link target-id="fig-00011" document="m00124"/> to answer each question.</para>
    <figure id="fig-00011">
    <media alt="Two graphs. Graph I has six vertices: a, b, c, d, e, and f. Edges connect a b, b c, b e, d e, and e f. Graph J has seven vertices: g h, i, j, k, l, and m. Edges connect g h, h i, j h, j l, k l, and l m.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_253.png"/>
    </media>
    <caption>Graphs <emphasis effect="italic">I</emphasis> and <emphasis effect="italic">J</emphasis></caption>
    </figure>
    <list list-type="enumerated" number-style="arabic" id="list-00004">
    <item>Which vertices are in each of the components that remain when edge <emphasis effect="italic">be</emphasis> is removed from Graph <emphasis effect="italic">I</emphasis>?</item>
    <item>Determine the number of edges and the number of vertices in Graph <emphasis effect="italic">J</emphasis>. Explain how this confirms that Graph <emphasis effect="italic">J</emphasis> is a tree.</item>
    <item>What kind of cycle is created if edge <emphasis effect="italic">im</emphasis> is added to Graph <emphasis effect="italic">J</emphasis>?</item>
    </list>
    </problem>
    <solution id="sol-00003">
    <list list-type="enumerated" number-style="arabic" id="list-00005">
    <item>When edge <emphasis effect="italic">be</emphasis> is removed, there are two components that remain. One component includes vertices <emphasis effect="italic">a, b</emphasis>, and <emphasis effect="italic">c</emphasis>. The other component includes vertices <emphasis effect="italic">d, e</emphasis>, and <emphasis effect="italic">f</emphasis>.</item>
    <item>There are seven vertices and six edges in Graph <emphasis effect="italic">J</emphasis>. This confirms that Graph <emphasis effect="italic">J</emphasis> is a tree because the number of edges is one less than the number of vertices.</item>
    <item>The pentagon (<emphasis effect="italic">i</emphasis>, <emphasis effect="italic">h</emphasis>, <emphasis effect="italic">j</emphasis>, <emphasis effect="italic">l</emphasis>, <emphasis effect="italic">m</emphasis>) is created when edge <emphasis effect="italic" xmlns="http://cnx.rice.edu/cnxml">im</emphasis> is added to Graph <emphasis effect="italic">J</emphasis>.</item>
    </list>
    </solution>
    </exercise>
    </example>
    <note class="your-turn" id="note-00004">
    <exercise id="exer-00006">
    <problem id="prob-00006">
    <para id="para-00019"><link class="os-embed" url="#exercise/CM-C12-M10-Q003"/></para>
    </problem>
    </exercise>
    </note>
    <note class="who-knew" id="note-00005">
    <title>Graph Theory in the Movies</title>
    <para id="para-00020">In the 1997 film <emphasis effect="italic">Good Will Hunting</emphasis>, the main character, Will, played by Matt Damon, solves what is supposed to be an exceptionally difficult graph theory problem, “Draw all the homeomorphically irreducible trees of size <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>n</mi><mo>=</mo><mn>10</mn></mrow></math>.” That sounds terrifying! But don’t panic. Watch this great Numberphile video to see why this is actually a problem you can do at home!</para>
    </note>
    <note class="video" id="note-00006" xmlns="http://cnx.rice.edu/cnxml">
    <para id="para-00021"><link url="https://openstax.org/r/Hunting_Numberphile">The problem in <emphasis effect="italic">Good Will Hunting</emphasis> by Numberphile</link></para>
    </note>
    </section>
    <section id="sect-00005">
    <title>Spanning Trees</title>
    <para id="para-00022">Suppose that you planned to set up your own computer network with four devices. One option is to use a “mesh topology” like the one in <link target-id="fig-00012" document="m00124"/>, in which each device is connected directly to every other device in the network.</para>
    <figure id="fig-00012">
    <media alt="Four illustrations represent the common network configurations. The first illustration represents mesh topology. Six computers are interconnected. The second illustration represents a ring topology. Five computers are connected in a ring. The third illustration represents star topology. A computer at the center is connected to five computers surrounding it. The fourth illustration represents tree topology. Two branches arise from a horizontal bus. Each branch has a computer at the center connected to five computers surrounding it.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_246.png"/>
    </media>
    <caption>Common Network Configurations</caption>
    </figure>
    <para id="para-00023">The mesh topology for four devices could be represented by the complete Graph <emphasis effect="italic">A</emphasis><sub>1</sub> in <link target-id="fig-00013" document="m00124"/> where the vertices represent the devices, and the edges represent network connections. However, the devices could be networked using fewer connections. Graphs <emphasis effect="italic">A</emphasis><sub>2</sub>, <emphasis effect="italic">A</emphasis><sub>3,</sub> and <emphasis effect="italic">A</emphasis><sub>4</sub> of <link target-id="fig-00013" document="m00124"/> show configurations in which three of the six edges have been removed. Each of the Graphs <emphasis effect="italic">A</emphasis><sub>2</sub>, <emphasis effect="italic">A</emphasis><sub>3</sub> and <emphasis effect="italic">A</emphasis><sub>4</sub> in <link target-id="fig-00013" document="m00124"/> is a tree because it is connected and contains no cycles. Since Graphs <emphasis effect="italic">A</emphasis><sub>2</sub>, <emphasis effect="italic">A</emphasis><sub>3</sub> and <emphasis effect="italic">A</emphasis><sub>4</sub> are also subgraphs of Graph <emphasis effect="italic">A</emphasis><sub>1</sub> that include every vertex of the original graph, they are also known as <term id="term-00004">spanning trees</term>.</para>
    <figure id="fig-00013">
    <media alt="Four graphs. Graph A 1 has four vertices: a, b, c, and d. The edges are a b, b d, d c, c a, a d, and b c. Graph A 2 has four vertices: a, b, c, and d. The edges are a b, b c, and c d. Graph A 3 has four vertices: a, b, c, and d. The edges are a b, a c, and c d. Graph A 4 has four vertices: a, b, c, and d. The edges are a b, a c, and a d.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_254.png"/>
    </media>
    <caption>Network Configurations for Four Devices</caption>
    </figure>
    <para id="para-00024">By definition, spanning trees must span the whole graph by visiting all the vertices. Since spanning trees are subgraphs, they may only have edges between vertices that were adjacent in the original graph. Since spanning trees are trees, they are connected and they are acyclic. So, when deciding whether a graph is a spanning tree, check the following characteristics:</para>
    <list bullet-style="bulleted" id="list-00006">
    <item>All vertices are included.</item>
    <item>No vertices are adjacent that were not adjacent in the original graph.</item>
    <item>The graph is connected.</item>
    <item>There are no cycles.</item>
    </list>
    <example id="exam-00004">
    <title>Identifying Spanning Trees</title>
    <exercise id="exer-00007">
    <problem id="prob-00007">
    <para id="para-00025">Use <link target-id="fig-00014" document="m00124"/> to determine which of graphs <emphasis effect="italic">M</emphasis><sub>1</sub>, <emphasis effect="italic">M</emphasis><sub>2</sub>, <emphasis effect="italic">M</emphasis><sub>3</sub>, and <emphasis effect="italic">M</emphasis><sub>4</sub>, are spanning trees of <emphasis effect="italic">Q</emphasis>.</para>
    <figure id="fig-00014">
    <media alt="Five graphs. Graph Q has six vertices: a, b, c, d, e, and f. The edges are a b, a c, a d, b d, d f, c d, c e, c f, and e f. Graph M 1 has six vertices: a, b, c, d, e, and f. The edges are a b, b d, d c, c e, f, and f d. Graph M 2 has six vertices: a, b, c, d, e, and f. The edges are a b, a d, d f, f e, and e c. Graph M 3 has six vertices; a, b, c, d, e, and f. The edges are b d, d f, a f, f e, and e c. Graph M 4 has six vertices: a, b, c, d, e, and f. The edges are a b, c e, e f, and f d.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_255.png"/>
    </media>
    <caption>Graphs <emphasis effect="italic">Q</emphasis>, <emphasis effect="italic">M</emphasis><sub>1</sub>, <emphasis effect="italic">M</emphasis><sub>2</sub>, <emphasis effect="italic">M</emphasis><sub>3,</sub> and <emphasis effect="italic">M</emphasis><sub>4</sub></caption>
    </figure>
    </problem>
    <solution id="sol-00004">
    <list list-type="enumerated" number-style="arabic" id="list-00007">
    <item>Graph <emphasis effect="italic">M</emphasis><sub>1</sub> is not a spanning tree of Graph <emphasis effect="italic">Q</emphasis> because it has a cycle (<emphasis effect="italic">c</emphasis>, <emphasis effect="italic">d</emphasis>, <emphasis effect="italic">f</emphasis>, <emphasis effect="italic">e</emphasis>).</item>
    <item xmlns="http://cnx.rice.edu/cnxml">Graph <emphasis effect="italic">M</emphasis><sub>2</sub> is a spanning tree of Graph <emphasis effect="italic">Q</emphasis> because it has all the original vertices, no vertices are adjacent in <emphasis effect="italic">M</emphasis><sub>2</sub> that weren’t adjacent in Graph <emphasis effect="italic">Q</emphasis>, Graph <emphasis effect="italic">M</emphasis><sub>2</sub> is connected and it contains no cycles.</item>
    <item>Graph <emphasis effect="italic">M</emphasis><sub>3</sub> is not a spanning tree of Graph <emphasis effect="italic">Q</emphasis> because vertices <emphasis effect="italic">a</emphasis> and <emphasis effect="italic">f</emphasis> are adjacent in Graph <emphasis effect="italic">M</emphasis><sub>3</sub> but not in Graph <emphasis effect="italic">Q</emphasis>.</item>
    <item>Graph <emphasis effect="italic">M</emphasis><sub>4</sub> is not a spanning tree of Graph <emphasis effect="italic">Q</emphasis> because it is not connected.</item>
    </list>
    <para id="para-00026">So, only graph <emphasis effect="italic">M</emphasis><sub>2</sub> is a spanning tree of Graph <emphasis effect="italic">Q</emphasis>.</para>
    </solution>
    </exercise>
    </example>
    <note class="your-turn" id="note-00007">
    <exercise id="exer-00008">
    <problem id="prob-00008">
    <para id="para-00027"><link class="os-embed" url="#exercise/CM-C12-M10-Q004"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00006">
    <title>Constructing a Spanning Tree Using Paths</title>
    <para id="para-00028">Suppose that you wanted to find a spanning tree within a graph. One approach is to find paths within the graph. You can start at any vertex, go any direction, and create a path through the graph stopping only when you can’t continue without backtracking as shown in <link target-id="fig-00015" document="m00124"/>.</para>
    <figure id="fig-00015">
    <media alt="A graph with 23 vertices and 35 edges. Ten edges are highlighted in green. Two vertices are labeled started here and stopped here.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_257.png"/>
    </media>
    <caption>First Phase to Construct a Spanning Tree</caption>
    </figure>
    <para id="para-00029">Once you have stopped, pick a vertex along the path you drew as a starting point for another path. Make sure to visit only vertices you have not visited before as shown in <link target-id="fig-00016" document="m00124"/>.</para>
    <figure id="fig-00016">
    <media alt="A graph with 23 vertices and 35 edges. Ten edges are highlighted in blue. Ten edges are highlighted in green. Two vertices are labeled started here and stopped here.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_258.png"/>
    </media>
    <caption>Intermediate Phase to Construct a Spanning Tree</caption>
    </figure>
    <para id="para-00030">Repeat this process until all vertices have been visited as shown in <link target-id="fig-00017" document="m00124"/>.</para>
    <figure id="fig-00017">
    <media alt="A graph with 23 vertices and 35 edges. Ten edges are highlighted in blue. Ten edges are highlighted in green. Two vertices are labeled started here and stopped here. Two edges are highlighted in purple.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_259.png"/>
    </media>
    <caption>Final Phase to Construct a Spanning Tree</caption>
    </figure>
    <para id="para-00031">The end result is a tree that spans the entire graph as shown in <link target-id="fig-00018" document="m00124"/>.</para>
    <figure id="fig-00018">
    <media alt="A graph with 23 vertices and 22 edges.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_260.png"/>
    </media>
    <caption>The Resulting Spanning Tree</caption>
    </figure>
    <para id="para-00032">Notice that this subgraph is a tree because it is connected and acyclic. It also visits every vertex of the original graph, so it is a spanning tree. However, it is not the only spanning tree for this graph. By making different turns, we could create any number of distinct spanning trees.</para>
    <example id="exam-00005">
    <title>Constructing Spanning Trees</title>
    <exercise id="exer-00009">
    <problem id="prob-00009">
    <para id="para-00033">Construct two distinct spanning trees for the graph in <link target-id="fig-00019" document="m00124"/>.</para>
    <figure id="fig-00019">
    <media alt="Graph L has 11 vertices and 19 edges. The graph resembles a square resting below a triangle on either side. The triangles are connected via a trapezoid. The squares have diagonal lines.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_261.png"/>
    </media>
    <caption>Graph <emphasis effect="italic">L</emphasis></caption>
    </figure>
    </problem>
    <solution id="sol-00005">
    <para id="para-00034">Two possible solutions are given in <link target-id="fig-00020" document="m00124"/> and <link target-id="fig-00021" document="m00124"/>.</para>
    <figure id="fig-00020">
    <media alt="Two graphs depict removing edges from graph L. The first graph has 11 vertices and 19 edges. It resembles a square resting below a triangle on either side. The triangles are connected via a trapezoid. The squares have diagonal lines. 6 edges are in green, 2 edges are in purple, and 2 edges are in blue. Green represents phase 1, blue represents phase 2, and purple represents phase 3. The second graph is the final tree. The black edges from the first graph are removed.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_262.png"/>
    </media>
    <caption>First Spanning Tree for Graph <emphasis effect="italic">L</emphasis></caption>
    </figure>
    <figure id="fig-00021">
    <media alt="Two graphs depict removing edges from graph L. The first graph has 11 vertices and 19 edges. It resembles a square resting below a triangle on either side. The triangles are connected via a trapezoid. The squares have diagonal lines. 6 edges are in green, 2 edges are in purple, and 2 edges are in blue. Green represents phase 1, blue represents phase 2, and purple represents phase 3. The second graph is the final tree. The black edges from the first graph are removed.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_263.png"/>
    </media>
    <caption>Second Spanning Tree for Graph <emphasis effect="italic">L</emphasis></caption>
    </figure>
    </solution>
    </exercise>
    </example>
    <note class="your-turn" id="note-00008">
    <exercise id="exer-00010">
    <problem id="prob-00010">
    <para id="para-00035"><link class="os-embed" url="#exercise/CM-C12-M10-Q005"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section id="sect-00007">
    <title>Revealing Spanning Trees</title>
    <para id="para-00036">Another approach to finding a spanning tree in a connected graph involves removing unwanted edges to reveal a spanning tree. Consider Graph <emphasis effect="italic">D</emphasis> in <link target-id="fig-00022" document="m00124"/>.</para>
    <figure id="fig-00022">
    <media alt="Graph D has 10 vertices. The vertices are labeled from a to j. The edges are c d, c a, d a, a g, a h, g h, a b, b e, b f, e f, b i, b j, and I j.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_266.png"/>
    </media>
    <caption>Graph <emphasis effect="italic">D</emphasis></caption>
    </figure>
    <para id="para-00037">Graph <emphasis effect="italic">D</emphasis> has 10 vertices. A spanning tree of Graph <emphasis effect="italic">D</emphasis> must have 9 edges, because the number of edges is one less than the number of vertices in any tree. Graph <emphasis effect="italic">D</emphasis> has 13 edges so 4 need to be removed. To determine which 4 edges to remove, remember that trees do not have cycles. There are four triangles in Graph <emphasis effect="italic">D</emphasis> that we need to break up. We can accomplish this by removing 1 edge from each of the triangles. There are many ways this can be done. Two of these ways are shown in <link target-id="fig-00023" document="m00124"/>.</para>
    <figure id="fig-00023">
    <media alt="Four graphs depict removing edges from graph D. In the first graph, the vertices are labeled from a to j. The edges are c d, c a, d a, a g, a h, g h, a b, b e, b f, e f, b i, b j, and i j. The edges, a c, e f, g h, and b j are shown in dashed lines. The second graph is the same as that of the first with edges, a c, e f, g h, and b j removed. In the third graph, the vertices are labeled from a to j. The edges are c d, c a, d a, a g, a h, g h, a b, b e, b f, e f, b i, b j, and i j. The edges, a c, a g, b f, and b i are shown in dashed lines. The fourth graph is the same as that of the first with edges, a c, a g, b f, and b i removed.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_267a.png"/>
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_267b.png"/>
    </media>
    <caption>Removing Four Edges from Graph <emphasis effect="italic">D</emphasis></caption>
    </figure>
    <note class="video" id="note-00009">
    <para id="para-00038"><link url="https://openstax.org/r/Spanning_Trees_in_Graph_Theory">Spanning Trees in Graph Theory</link></para>
    </note>
    <example id="exam-00006">
    <title>Removing Edges to Find Spanning Trees</title>
    <exercise id="exer-00011">
    <problem id="prob-00011">
    <para id="para-00039">Use the graph in <link target-id="fig-00025" document="m00124"/> to answer each question.</para>
    <figure id="fig-00025">
    <media alt="Graph V has 9 vertices. The vertices are labeled from a to i. The edges are f c, f a, c a, c d, d a, a b, b e, e h, h i, I g, and g b.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_268.png"/>
    </media>
    <caption>Graph <emphasis effect="italic">V</emphasis></caption>
    </figure>
    <list list-type="enumerated" number-style="arabic" id="list-00008">
    <item>Determine the number of edges that must be removed to reveal a spanning tree.</item>
    <item>Name all the undirected cycles in Graph <emphasis effect="italic">V</emphasis>.</item>
    <item>Find two distinct spanning trees of Graph <emphasis effect="italic">V</emphasis>.</item>
    </list>
    </problem>
    <solution id="sol-00006">
    <list list-type="enumerated" number-style="arabic" id="list-00009">
    <item>Graph <emphasis effect="italic">V</emphasis> has nine vertices so a spanning tree for the graph must have 8 edges. Since Graph <emphasis effect="italic">V</emphasis> has 11 edges, 3 edges must be removed to reveal a spanning tree.</item>
    <item>(<emphasis effect="italic">a</emphasis>, <emphasis effect="italic">c</emphasis>, <emphasis effect="italic">d</emphasis>), (<emphasis effect="italic">a</emphasis>, <emphasis effect="italic">c</emphasis>, <emphasis effect="italic">f</emphasis>), (<emphasis effect="italic">a</emphasis>, <emphasis effect="italic">d</emphasis>, <emphasis effect="italic">c</emphasis>, <emphasis effect="italic">f</emphasis>), and (<emphasis effect="italic">b</emphasis>, <emphasis effect="italic">e</emphasis>, <emphasis effect="italic">h</emphasis>, <emphasis effect="italic">i</emphasis>, <emphasis effect="italic">g</emphasis>)</item>
    <item xmlns="http://cnx.rice.edu/cnxml">To find the first spanning tree, remove edge <emphasis effect="italic">ac</emphasis>, which will break up both of the triangles, remove edge <emphasis effect="italic">cf </emphasis>, which will break up the quadrilateral, and remove <emphasis effect="italic">be</emphasis>, which will break up the pentagon, to give us the spanning tree shown in <link target-id="fig-00026" document="m00124"/>.
    <figure id="fig-00026">
    <media alt="A graph has 9 vertices. The vertices are labeled from a to i. The edges are f a, c d, d a, a b, b g, g i, I h, and h e.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_269.png"/>
    </media>
    <caption>Spanning Tree Formed Removing <emphasis effect="italic">ac, cf</emphasis>, and <emphasis effect="italic">be</emphasis></caption>
    </figure>
    <para id="para-00040">To find another spanning tree, remove <emphasis effect="italic">ad</emphasis>, which will break up (<emphasis effect="italic">a</emphasis>, <emphasis effect="italic">c</emphasis>, <emphasis effect="italic">d</emphasis>) and (<emphasis effect="italic">a</emphasis>, <emphasis effect="italic">d</emphasis>, <emphasis effect="italic">c</emphasis>, <emphasis effect="italic">f</emphasis>), remove <emphasis effect="italic" xmlns="http://cnx.rice.edu/cnxml">af</emphasis> to break up (<emphasis effect="italic">a</emphasis>, <emphasis effect="italic">c</emphasis>, <emphasis effect="italic">f</emphasis>), and remove <emphasis effect="italic" xmlns="http://cnx.rice.edu/cnxml">hi</emphasis> to break up (<emphasis effect="italic">b</emphasis>, <emphasis effect="italic">e</emphasis>, <emphasis effect="italic">h</emphasis>, <emphasis effect="italic">i</emphasis>, <emphasis effect="italic">g</emphasis>). This will give us the spanning tree in <link target-id="fig-00027" document="m00124"/>.</para>
    <figure id="fig-00027" xmlns="http://cnx.rice.edu/cnxml">
    <media alt="A graph has 9 vertices. The vertices are labeled from a to i. The edges are f c, c d, c a, a b, b e, e h, b g, and g i.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_270.png"/>
    </media>
    <caption>Spanning Tree Formed Removing <emphasis effect="italic">ad</emphasis>, <emphasis effect="italic">af</emphasis>, and <emphasis effect="italic">hi</emphasis></caption>
    </figure>
    </item>
    </list>
    </solution>
    </exercise>
    </example>
    <note class="your-turn" id="note-00010">
    <exercise id="exer-00012">
    <problem id="prob-00012">
    <para id="para-00041"><link class="os-embed" url="#exercise/CM-C12-M10-Q006"/></para>
    </problem>
    </exercise>
    </note>
    <note class="who-knew" id="note-00011">
    <title>Chains of Affection</title>
    <para id="para-00042">Here is a strange question to ask in a math class: Have you ever dated your ex’s new partner’s ex? Research suggests that your answer is probably no. When researchers Peter S. Bearman, James Moody, and Katherine Stovel attempted to compare the structure of heterosexual romantic networks at a typical midwestern high school to simulated networks, they found something surprising. The actual social networks were more like spanning trees than other possible models because there were very few short cycles. In particular, there were almost no four-cycles.</para>
    <figure id="fig-00028">
    <media alt="A graph with four vertices. The vertices are Bob, Alice, Carol, and Ted. A double-headed arrow labeled time 1 is between Bob and Carol. A double-headed arrow labeled time 1 is between Alice and Tex. A double-headed arrow labeled time 2 is between Carol and Ted. A double-headed arrow labeled with a question mark is between Bob and Alice.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_295.png"/>
    </media>
    <caption>Chains of Affection</caption>
    </figure>
    <para id="para-00043">“…the prohibition against dating (from a female perspective) one’s old boyfriend’s current girlfriend’s old boyfriend – accounts for the structure of the romantic network at [the highschool].”</para>
    <para id="para-00044">In their article “Chains of Affection: The Structure of Adolescent Romantic and Sexual Networks,” the researchers went on to explain the implications for the transmission of sexually transmitted diseases. In particular, social structures based on tree graphs are less dense and more likely to fragment. This information can impact social policies on disease prevention. (Peter S. Bearman, James Moody, and Katherine Stovel, “Chains of Affection: The Structure of Adolescent Romantic and Sexual Networks,” <emphasis effect="italic">American Journal of Sociology</emphasis> Volume 110, Number 1, pp. 44-91, 2004)</para>
    </note>
    </section>
    <section id="sect-00008">
    <title>Kruskal’s Algorithm</title>
    <para id="para-00045">In many applications of spanning trees, the graphs are weighted and we want to find the spanning tree of least possible weight. For example, the graph might represent a computer network, and the weights might represent the cost involved in connecting two devices. So, finding a spanning tree with the lowest possible total weight, or <term id="term-00005">minimum spanning tree</term>, means saving money! The method that we will use to find a minimum spanning tree of a weighted graph is called <term id="term-00006">Kruskal’s algorithm</term>. The steps for Kruskal’s algorithm are:</para>
    <para id="para-00046"><emphasis effect="bold">Step 1:</emphasis> Choose any edge with the minimum weight of all edges.</para>
    <para id="para-00047"><emphasis effect="bold">Step 2:</emphasis> Choose another edge of minimum weight from the remaining edges. The second edge does not have to be connected to the first edge.</para>
    <para id="para-00048"><emphasis effect="bold">Step 3:</emphasis> Choose another edge of minimum weight from the remaining edges, but do not select any edge that creates a cycle in the subgraph you are creating.</para>
    <para id="para-00049"><emphasis effect="bold">Step 4:</emphasis> Repeat step 3 until all the vertices of the original graph are included and you have a spanning tree.</para>
    <note class="video" id="note-00012">
    <para id="para-00050"><link url="https://openstax.org/r/Trees_in_Graph_Theory">Use Kruskal's Algorithm to find Minimum Spanning Trees in Graph Theory</link></para>
    </note>
    <example id="exam-00007">
    <title>Using Kruskal’s Algorithm</title>
    <exercise id="exer-00013">
    <problem id="prob-00013">
    <para id="para-00051">A computer network will be set up with six devices. The vertices in the graph in <link target-id="fig-00029" document="m00124"/> represent the devices, and the edges represent the cost of a connection. Find the network configuration that will cost the least. What is the total cost?</para>
    <figure id="fig-00029">
    <media alt="A graph represents the airfares between six different cities. The graph has 6 vertices. The vertices are A, B, C, D, E, and F. Edges from A leading to B, C, D, E, and F are labeled 250 dollars, 210 dollars, 300 dollars, 200 dollars, and 100 dollars. Edges from B leading to C, D, E, and F are labeled 220 dollars, 120 dollars, 160 dollars, and 170 dollars. Edges from C to D, E, and F are labeled 310 dollars, 180 dollars, and 330 dollars. Edges from D to E and F 270 dollars and 150 dollars. An edge from E to F is labeled 350 dollars.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_271.png"/>
    </media>
    <caption>Graph of Network Connection Costs</caption>
    </figure>
    </problem>
    <solution id="sol-00007">
    <para id="para-00052">A minimum spanning tree will correspond to the network configuration of least cost. We will use Kruskal’s algorithm to find one. Since the graph has six vertices, the spanning tree will have six vertices and five edges.</para>
    <para id="para-00053"><emphasis effect="bold">Step 1:</emphasis> Choose an edge of least weight. We have sorted the weights into numerical order. The least is $100. The only edge of this weight is edge <emphasis effect="italic">AF</emphasis> as shown in <link target-id="fig-00030" document="m00124"/>.</para>
    <figure id="fig-00030">
    <media alt="A graph represents the airfares between six different cities. The graph has 6 vertices. The vertices are A, B, C, D, E, and F. Edges from A leading to B, C, D, E, and F are labeled 250 dollars, 210 dollars, 300 dollars, 200 dollars, and 100 dollars. Edges from B leading to C, D, E, and F are labeled 220 dollars, 120 dollars, 160 dollars, and 170 dollars. Edges from C to D, E, and F are labeled 310 dollars, 180 dollars, and 330 dollars. Edges from D to E and F 270 dollars and 150 dollars. An edge from E to F is labeled 350 dollars. Edge, A F is in dashed lines. Cost in dollars are as follows: 100, 120, 150, 160, 170, 170, 200, 210, 220, 250, 270, 300, 310, 330, and 350. 100 is struck through.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_272.png"/>
    </media>
    <caption>Step 1 Select Edge <emphasis effect="italic">AF</emphasis></caption>
    </figure>
    <para id="para-00054"><emphasis effect="bold">Step 2:</emphasis> Choose the edge of least weight of the remaining edges, which is <emphasis effect="italic">BD</emphasis> with $120. Notice that the two selected edges do not need to be adjacent to each other as shown in <link target-id="fig-00031" document="m00124"/>.</para>
    <figure id="fig-00031">
    <media alt="A graph represents the airfares between six different cities. The graph has 6 vertices. The vertices are A, B, C, D, E, and F. Edges from A leading to B, C, D, E, and F are labeled 250 dollars, 210 dollars, 300 dollars, 200 dollars, and 100 dollars. Edges from B leading to C, D, E, and F are labeled 220 dollars, 120 dollars, 160 dollars, and 170 dollars. Edges from C to D, E, and F are labeled 310 dollars, 180 dollars, and 330 dollars. Edges from D to E and F 270 dollars and 150 dollars. An edge from E to F is labeled 350 dollars. Edges, A F, and B D are in dashed lines. Cost in dollars are as follows: 100, 120, 150, 160, 170, 170, 200, 210, 220, 250, 270, 300, 310, 330, and 350. 100 and 120 are struck through.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_273.png"/>
    </media>
    <caption>Step 2 Select Edge <emphasis effect="italic">BD</emphasis></caption>
    </figure>
    <para id="para-00055"><emphasis effect="bold">Step 3:</emphasis> Select the lowest weight edge of the remaining edges, as long as it does not result in a cycle. We select <emphasis effect="italic">DF</emphasis> with $150 since it does not form a cycle as shown in <link target-id="fig-00032" document="m00124"/>.</para>
    <figure id="fig-00032">
    <media alt="A graph represents the airfares between six different cities. The graph has 6 vertices. The vertices are A, B, C, D, E, and F. Edges from A leading to B, C, D, E, and F are labeled 250 dollars, 210 dollars, 300 dollars, 200 dollars, and 100 dollars. Edges from B leading to C, D, E, and F are labeled 220 dollars, 120 dollars, 160 dollars, and 170 dollars. Edges from C to D, E, and F are labeled 310 dollars, 180 dollars, and 330 dollars. Edges from D to E and F 270 dollars and 150 dollars. An edge from E to F is labeled 350 dollars. Edges, A F, B D, and D F are in dashed lines. Cost in dollars are as follows: 100, 120, 150, 160, 170, 170, 200, 210, 220, 250, 270, 300, 310, 330, and 350. 100, 120, and 150 are struck through.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_274.png"/>
    </media>
    <caption>Step 3 Select Edge <emphasis effect="italic">DF</emphasis></caption>
    </figure>
    <para id="para-00056"><emphasis effect="bold">Repeat Step 3:</emphasis> Select the lowest weight edge of the remaining edges, which is <emphasis effect="italic">BE</emphasis> with $160 and it does not form a cycle as shown in <link target-id="fig-00033" document="m00124"/>. This gives us four edges so we only need to repeat step 3 once more to get the fifth edge.</para>
    <figure id="fig-00033">
    <media alt="A graph represents the airfares between six different cities. The graph has 6 vertices. The vertices are A, B, C, D, E, and F. Edges from A leading to B, C, D, E, and F are labeled 250 dollars, 210 dollars, 300 dollars, 200 dollars, and 100 dollars. Edges from B leading to C, D, E, and F are labeled 220 dollars, 120 dollars, 160 dollars, and 170 dollars. Edges from C to D, E, and F are labeled 310 dollars, 180 dollars, and 330 dollars. Edges from D to E and F 270 dollars and 150 dollars. An edge from E to F is labeled 350 dollars. Edges, A F, B D, B E, and D F are in dashed lines. Cost in dollars are as follows: 100, 120, 150, 160, 170, 170, 200, 210, 220, 250, 270, 300, 310, 330, and 350. 100, 120, 150, and 160 are struck through.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_275.png"/>
    </media>
    <caption>Repeat Step 3 Select Edge <emphasis effect="italic">DF</emphasis></caption>
    </figure>
    <para id="para-00057"><emphasis effect="bold">Repeat Step 3:</emphasis> The lowest weight of the remaining edges is $170. Both <emphasis effect="italic">BF</emphasis> and <emphasis effect="italic">CE</emphasis> have a weight of $170, but <emphasis effect="italic">BF</emphasis> would create cycle (<emphasis effect="italic">b</emphasis>, <emphasis effect="italic">d</emphasis>, <emphasis effect="italic">f</emphasis>) and there cannot be a cycle in a spanning tree as shown in <link target-id="fig-00034" document="m00124"/>.</para>
    <figure id="fig-00034" xmlns="http://cnx.rice.edu/cnxml">
    <media alt="A graph represents the airfares between six different cities. The graph has 6 vertices. The vertices are A, B, C, D, E, and F. Edges from A leading to B, C, D, E, and F are labeled 250 dollars, 210 dollars, 300 dollars, 200 dollars, and 100 dollars. Edges from B leading to C, D, E, and F are labeled 220 dollars, 120 dollars, 160 dollars, and 170 dollars. Edges from C to D, E, and F are labeled 310 dollars, 180 dollars, and 330 dollars. Edges from D to E and F 270 dollars and 150 dollars. An edge from E to F is labeled 350 dollars. Edges, A F, B D, B E, and DF are in dashed lines. Edge, B F is in red. Cost in dollars are as follows: 100, 120, 150, 160, 170, 170, 200, 210, 220, 250, 270, 300, 310, 330, and 350. 100, 120, 150, and 160 are struck through. 170 is crossed out.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_276.png"/>
    </media>
    <caption>Repeat Step 3 Do Not Select Edge <emphasis effect="italic">BF</emphasis></caption>
    </figure>
    <para id="para-00058">So, we will select <emphasis effect="italic">CE</emphasis>, which will complete the spanning tree as shown in <link target-id="fig-00035" document="m00124"/>.</para>
    <figure id="fig-00035">
    <media alt="A graph represents the airfares between six different cities. The graph has 6 vertices. The vertices are A, B, C, D, E, and F. Edges from A leading to B, C, D, E, and F are labeled 250 dollars, 210 dollars, 300 dollars, 200 dollars, and 100 dollars. Edges from B leading to C, D, E, and F are labeled 220 dollars, 120 dollars, 160 dollars, and 170 dollars. Edges from C to D, E, and F are labeled 310 dollars, 180 dollars, and 330 dollars. Edges from D to E and F 270 dollars and 150 dollars. An edge from E to F is labeled 350 dollars. Edges, A F, B D, B E, C E, and D F are in dashed lines. Cost in dollars are as follows: 100, 120, 150, 160, 170, 170, 200, 210, 220, 250, 270, 300, 310, 330, and 350. 100, 120, 150, 160, and 170 are struck through. 170 is crossed out.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_277.png"/>
    </media>
    <caption>Repeat Step 3 Select Edge <emphasis effect="italic">CE</emphasis></caption>
    </figure>
    <para id="para-00059">The minimum spanning tree is shown in <link target-id="fig-00036" document="m00124"/>. This is the configuration of the network of least cost. The spanning tree has a total weight of <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mo>$</mo><mn>100</mn><mo>+</mo><mo>$</mo><mn>120</mn><mo>+</mo><mo>$</mo><mn>150</mn><mo>+</mo><mo>$</mo><mn>160</mn><mo>+</mo><mo>$</mo><mn>170</mn><mo>=</mo><mo>$</mo><mn>700</mn></mrow></math>, which is the total cost of this network configuration.</para>
    <figure id="fig-00036" xmlns="http://cnx.rice.edu/cnxml">
    <media alt="A graph has six vertices labeled A to F. The edges are as follows. A F, curved edge, 100 dollars. B E, 160 dollars. B D, 120 dollars. C E, 170 dollars. D F, 150 dollars.">
    <image mime-type="image/png" src="../../media/CS_Figure_12_10_278.png"/>
    </media>
    <caption>Final Minimum Spanning Tree</caption>
    </figure>
    </solution>
    </exercise>
    </example>
    <note class="your-turn" id="note-00013">
    <exercise id="exer-00014">
    <problem id="prob-00014">
    <para id="para-00060"><link class="os-embed" url="#exercise/CM-C12-M10-Q007"/></para>
    </problem>
    </exercise>
    </note>
    </section>
    <section class="check-understanding" id="sect-00009">
    <title>Check Your Understanding</title>
    <exercise id="exer-00015">
    <problem id="prob-00015">
    <para id="para-00061"><link class="os-embed" url="#exercise/CM-C12-M10-Q008"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00071">
    <problem id="prob-00071">
    <para id="para-00126"><link class="os-embed" url="#exercise/CM-C12-M10-Q064"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00072">
    <problem id="prob-00072">
    <para id="para-00127"><link class="os-embed" url="#exercise/CM-C12-M10-Q065"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00073">
    <problem id="prob-00073">
    <para id="para-00128"><link class="os-embed" url="#exercise/CM-C12-M10-Q066"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00074">
    <problem id="prob-00074">
    <para id="para-00129"><link class="os-embed" url="#exercise/CM-C12-M10-Q067"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00075">
    <problem id="prob-00075">
    <para id="para-00130"><link class="os-embed" url="#exercise/CM-C12-M10-Q068"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00076">
    <problem id="prob-00076">
    <para id="para-00131"><link class="os-embed" url="#exercise/CM-C12-M10-Q069"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00077">
    <problem id="prob-00077">
    <para id="para-00132"><link class="os-embed" url="#exercise/CM-C12-M10-Q070"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00078">
    <problem id="prob-00078">
    <para id="para-00133"><link class="os-embed" url="#exercise/CM-C12-M10-Q071"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00079">
    <problem id="prob-00079">
    <para id="para-00134"><link class="os-embed" url="#exercise/CM-C12-M10-Q072"/></para>
    </problem>
    </exercise>
    </section>
    <section class="section-exercises" id="sect-00010">
    <exercise id="exer-00016">
    <problem id="prob-00016">
    <para id="para-00062"><link class="os-embed" url="#exercise/CM-C12-M10-Q009"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00017">
    <problem id="prob-00017">
    <para id="para-00063"><link class="os-embed" url="#exercise/CM-C12-M10-Q010"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00018">
    <problem id="prob-00018">
    <para id="para-00064"><link class="os-embed" url="#exercise/CM-C12-M10-Q011"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00019">
    <problem id="prob-00019">
    <para id="para-00065"><link class="os-embed" url="#exercise/CM-C12-M10-Q012"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00020">
    <problem id="prob-00020">
    <para id="para-00066"><link class="os-embed" url="#exercise/CM-C12-M10-Q013"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00021">
    <problem id="prob-00021">
    <para id="para-00067"><link class="os-embed" url="#exercise/CM-C12-M10-Q014"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00022">
    <problem id="prob-00022">
    <para id="para-00068"><link class="os-embed" url="#exercise/CM-C12-M10-Q015"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00023">
    <problem id="prob-00023">
    <para id="para-00069"><link class="os-embed" url="#exercise/CM-C12-M10-Q016"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00024">
    <problem id="prob-00024">
    <para id="para-00070"><link class="os-embed" url="#exercise/CM-C12-M10-Q017"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00025">
    <problem id="prob-00025">
    <para id="para-00071"><link class="os-embed" url="#exercise/CM-C12-M10-Q018"/></para>
    </problem>
    </exercise>
    </section>
    <section class="key-terms" id="sect-00011">
    <title>Key Terms</title>
    <list id="list-00010">
    <item>acyclic</item>
    <item>tree</item>
    <item>forest</item>
    <item>path graph or linear graph</item> 
    <item>star tree</item>
    <item>root</item>
    <item>starlike tree</item>
    <item>caterpillar tree</item>
    <item>lobster tree</item>
    <item>spanning tree</item>
    <item>minimum spanning tree</item>
    </list>
    </section>
    <section class="key-concepts" id="sect-00012">
    <title>Key Concepts</title>
    <list id="list-00011">
    <item>A brute force algorithm always finds the ideal solution but can be impractical whereas a greedy algorithm is efficient but usually does not lead to the ideal solution.</item> 
    <item>A Hamilton cycle of lowest weight is a solution to the traveling salesman problem.</item> 
    <item>The brute force method finds a Hamilton cycle of lowest weight in a complete graph.</item> 
    <item>The nearest neighbor method is a greedy algorithm that finds a Hamilton cycle of relatively low weight in a complete graph.</item>
    </list>
    </section>
    <section class="eoc-videos" id="sect-00013">
    <title>Videos</title>
    <list id="list-00016">
    <item><link url="https://openstax.org/r/Hunting_Numberphile">The problem in <emphasis effect="italic">Good Will Hunting</emphasis> by Numberphile</link></item>
    <item><link url="https://openstax.org/r/Spanning_Trees_in_Graph_Theory">Spanning Trees in Graph Theory</link></item>
    <item><link url="https://openstax.org/r/Trees_in_Graph_Theory">Use Kruskal's Algorithm to find Minimum Spanning Trees in Graph Theory</link></item>
    </list>
    </section>
    <section class="formula-review" id="sect-00043">
    <title>Formulas</title>
    <list bullet-style="bulleted" id="list-00012">
    <item>The number of edges in a tree graph with <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mi>n</mi></math> vertices is <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></math>. A connected graph with n vertices and <math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></math> edges is a tree graph.</item>
    </list>
    </section>
    <section class="projects" id="sect-00014" xmlns="http://cnx.rice.edu/cnxml">
    <title>Projects</title>
    <para id="para-00075"><emphasis effect="bold">Everyone Gets a Turn! – Graph Colorings</emphasis></para>
    <para id="para-00076">Let’s put your knowledge of graph colorings to work! Your task is to plan a field day following these steps.</para>
    <list list-type="enumerated" number-style="arabic" id="list-00013">
    <item>Select between seven and ten activities for your field day. You can look online for ideas.</item>
    <item>Create a survey asking for the participants to select the three to five events in which they would most like to participate. Survey between seven and ten people.</item>
    <item>Use the results of your survey to create a graph in which each vertex represents one of the events. A pair of vertices will be adjacent if there is at least one participant who would like to participate in both events.</item> 
    <item>Find a minimum coloring for the graph. Explain how you found it and how you know the chromatic number of the graph.</item>
    <item>Use your solution to part d to determine the minimum number of timeslots you must use to ensure that everyone has the opportunity to participate in their top three events.</item> 
    <item>Find the complement of the graph you created in Exercise 3. Explain what the edges in this graph represent.</item> 
    </list>
    <para id="para-00077"><emphasis effect="bold">A Beautiful Day in the Neighborhood – Euler Circuits</emphasis></para>
    <para id="para-00078">Let’s apply what you have learned to the community in which you live. Using resources such as your county’s property appraiser’s website, create a detailed graph of your neighborhood in which vertices represent turns and intersections. Represent a large enough part of your community to include no fewer than 10 intersections or turns. Then use your graph to answer the following questions.</para>
    <list list-type="enumerated" number-style="arabic" id="list-00014">
    <item>Label the edges of your graph.</item> 
    <item>Determine if your graph is Eulerian. Explain how you know. If it is not, eulerize it.</item> 
    <item>Find an Euler circuit for your graph. Give the sequence of vertices that you found.</item> 
    <item>What does the Euler circuit you found in part c represent for your community?</item>
    <item>Describe an application for which this Euler circuit might be used.</item> 
    </list>
    <para id="para-00079"><emphasis effect="bold">Dream Vacation – Hamilton Cycles and Paths</emphasis></para>
    <para id="para-00080">Where in the world would you like to travel most: the Eiffel Tower in Paris, a Broadway musical in New York city, a bike tour of Amsterdam, the Tenerife whale and dolphin cruises in the Canary Islands, the Giza Pyramid in Cairo, or maybe the Jokhang Temple in Tibet? Let's plan your dream vacation!</para>
    <list list-type="enumerated" number-style="arabic" id="list-00015">
    <item>Which four destinations are at the top of your bucket list?</item>
    <item>Draw a complete weighted graph with five vertices representing the four destinations and your home city, and the weights representing the cost of travel between cities.</item>
    <item>Use a website (such as <link url="https://openstax.org/r/travelocity">Travelocity</link>) to find the best airfare between each pair of cities. List the airlines and flight numbers along with the prices. Include cost for ground transportation from the nearest airport if there is no airport at the destination you want to visit.</item> 
    <item>Use the nearest neighbor algorithm to find a Hamilton cycle of low weight beginning and ending in your hometown. What is the weight of this circuit and what does it represent?</item>
    <item>Use the brute force method to find a Hamilton cycle of lowest weight beginning and ending in your hometown. What is the weight of this circuit? Is it the same or different from the weight of the Hamilton cycle you found in Exercise 4?</item>
    <item>Suppose that instead of returning home, you planned to move to your favorite location on the list, but you wanted to stop at the other three destinations once along the way. Where would you move? List all Hamilton paths between your hometown and your favorite location.</item>
    <item>Find the weights of all the Hamilton paths you found in Exercise 6.</item> 
    </list>
    </section>
    <section class="chapter-review" id="sect-00015">
    <title>Chapter Review</title>
    <section id="sect-00016">
    <title><link document="m00109">Graph Basics</link></title>
    <exercise id="exer-00026">
    <problem id="prob-00026">
    <para id="para-00081"><link class="os-embed" url="#exercise/CM-C12-M10-Q019"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00027">
    <problem id="prob-00027">
    <para id="para-00082"><link class="os-embed" url="#exercise/CM-C12-M10-Q020"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00028">
    <problem id="prob-00028">
    <para id="para-00083"><link class="os-embed" url="#exercise/CM-C12-M10-Q021"/></para>
    </problem>
    </exercise>
    </section>
    <section id="sect-00017">
    <title><link document="m00110">Graph Structures</link></title>
    <exercise id="exer-00029">
    <problem id="prob-00029">
    <para id="para-00084"><link class="os-embed" url="#exercise/CM-C12-M10-Q022"/></para>
    </problem>
    </exercise>
    </section>
    <section id="sect-00018">
    <title><link document="m00111">Comparing Graphs</link></title>
    <exercise id="exer-00030">
    <problem id="prob-00030">
    <para id="para-00085"><link class="os-embed" url="#exercise/CM-C12-M10-Q023"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00031">
    <problem id="prob-00031">
    <para id="para-00086"><link class="os-embed" url="#exercise/CM-C12-M10-Q024"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00032">
    <problem id="prob-00032">
    <para id="para-00087"><link class="os-embed" url="#exercise/CM-C12-M10-Q025"/></para>
    </problem>
    </exercise>
    </section>
    <section id="sect-00019">
    <title><link document="m00117">Navigating Graphs</link></title>
    <exercise id="exer-00033">
    <problem id="prob-00033">
    <para id="para-00088"><link class="os-embed" url="#exercise/CM-C12-M10-Q026"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00034">
    <problem id="prob-00034">
    <para id="para-00089"><link class="os-embed" url="#exercise/CM-C12-M10-Q027"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00035">
    <problem id="prob-00035">
    <para id="para-00090"><link class="os-embed" url="#exercise/CM-C12-M10-Q028"/></para>
    </problem>
    </exercise>
    </section>
    <section id="sect-00020">
    <title><link document="m00119">Euler Circuits</link></title>
    <exercise id="exer-00036">
    <problem id="prob-00036">
    <para id="para-00091"><link class="os-embed" url="#exercise/CM-C12-M10-Q029"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00037">
    <problem id="prob-00037">
    <para id="para-00092"><link class="os-embed" url="#exercise/CM-C12-M10-Q030"/></para>
    </problem>
    </exercise>
    </section>
    <section id="sect-00021">
    <title><link document="m00120">Euler Trails</link></title>
    <exercise id="exer-00038">
    <problem id="prob-00038">
    <para id="para-00093"><link class="os-embed" url="#exercise/CM-C12-M10-Q031"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00039">
    <problem id="prob-00039">
    <para id="para-00094"><link class="os-embed" url="#exercise/CM-C12-M10-Q032"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00040">
    <problem id="prob-00040">
    <para id="para-00095"><link class="os-embed" url="#exercise/CM-C12-M10-Q033"/></para>
    </problem>
    </exercise>
    </section>
    <section id="sect-00022">
    <title><link document="m00121">Hamilton Cycles</link></title>
    <exercise id="exer-00041">
    <problem id="prob-00041">
    <para id="para-00096"><link class="os-embed" url="#exercise/CM-C12-M10-Q034"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00042">
    <problem id="prob-00042">
    <para id="para-00097"><link class="os-embed" url="#exercise/CM-C12-M10-Q035"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00043">
    <problem id="prob-00043">
    <para id="para-00098"><link class="os-embed" url="#exercise/CM-C12-M10-Q036"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00044">
    <problem id="prob-00044">
    <para id="para-00099"><link class="os-embed" url="#exercise/CM-C12-M10-Q037"/></para>
    </problem>
    </exercise>
    </section>
    <section id="sect-00023">
    <title><link document="m00122">Hamilton Paths</link></title>
    <exercise id="exer-00045">
    <problem id="prob-00045">
    <para id="para-00100"><link class="os-embed" url="#exercise/CM-C12-M10-Q038"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00046">
    <problem id="prob-00046">
    <para id="para-00101"><link class="os-embed" url="#exercise/CM-C12-M10-Q039"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00047">
    <problem id="prob-00047">
    <para id="para-00102"><link class="os-embed" url="#exercise/CM-C12-M10-Q040"/></para>
    </problem>
    </exercise>
    </section>
    <section id="sect-00024">
    <title><link document="m00123">Traveling Salesman Problem</link></title>
    <exercise id="exer-00048">
    <problem id="prob-00048">
    <para id="para-00103"><link class="os-embed" url="#exercise/CM-C12-M10-Q041"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00049">
    <problem id="prob-00049">
    <para id="para-00104"><link class="os-embed" url="#exercise/CM-C12-M10-Q042"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00050">
    <problem id="prob-00050">
    <para id="para-00105"><link class="os-embed" url="#exercise/CM-C12-M10-Q043"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00051">
    <problem id="prob-00051">
    <para id="para-00106"><link class="os-embed" url="#exercise/CM-C12-M10-Q044"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00052">
    <problem id="prob-00052">
    <para id="para-00107"><link class="os-embed" url="#exercise/CM-C12-M10-Q045"/></para>
    </problem>
    </exercise>
    </section>
    <section id="sect-00025">
    <title><link document="m00124">Trees</link></title>
    <exercise id="exer-00053">
    <problem id="prob-00053">
    <para id="para-00108"><link class="os-embed" url="#exercise/CM-C12-M10-Q046"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00054">
    <problem id="prob-00054">
    <para id="para-00109"><link class="os-embed" url="#exercise/CM-C12-M10-Q047"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00055">
    <problem id="prob-00055">
    <para id="para-00110"><link class="os-embed" url="#exercise/CM-C12-M10-Q048"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00056">
    <problem id="prob-00056">
    <para id="para-00111"><link class="os-embed" url="#exercise/CM-C12-M10-Q049"/></para>
    </problem>
    </exercise>
    </section>
    </section>
    <section class="chapter-test" id="sect-00026">
    <title>Chapter Test</title>
    <exercise id="exer-00057">
    <problem id="prob-00057">
    <para id="para-00112"><link class="os-embed" url="#exercise/CM-C12-M10-Q050"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00058">
    <problem id="prob-00058">
    <para id="para-00113"><link class="os-embed" url="#exercise/CM-C12-M10-Q051"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00059">
    <problem id="prob-00059">
    <para id="para-00114"><link class="os-embed" url="#exercise/CM-C12-M10-Q052"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00060">
    <problem id="prob-00060">
    <para id="para-00115"><link class="os-embed" url="#exercise/CM-C12-M10-Q053"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00061">
    <problem id="prob-00061">
    <para id="para-00116"><link class="os-embed" url="#exercise/CM-C12-M10-Q054"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00062">
    <problem id="prob-00062">
    <para id="para-00117"><link class="os-embed" url="#exercise/CM-C12-M10-Q055"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00063">
    <problem id="prob-00063">
    <para id="para-00118"><link class="os-embed" url="#exercise/CM-C12-M10-Q056"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00064">
    <problem id="prob-00064">
    <para id="para-00119"><link class="os-embed" url="#exercise/CM-C12-M10-Q057"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00065">
    <problem id="prob-00065">
    <para id="para-00120"><link class="os-embed" url="#exercise/CM-C12-M10-Q058"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00066">
    <problem id="prob-00066">
    <para id="para-00121"><link class="os-embed" url="#exercise/CM-C12-M10-Q059"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00067">
    <problem id="prob-00067">
    <para id="para-00122"><link class="os-embed" url="#exercise/CM-C12-M10-Q060"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00068">
    <problem id="prob-00068">
    <para id="para-00123"><link class="os-embed" url="#exercise/CM-C12-M10-Q061"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00069">
    <problem id="prob-00069">
    <para id="para-00124"><link class="os-embed" url="#exercise/CM-C12-M10-Q062"/></para>
    </problem>
    </exercise>
    <exercise id="exer-00070">
    <problem id="prob-00070">
    <para id="para-00125"><link class="os-embed" url="#exercise/CM-C12-M10-Q063"/></para>
    </problem>
    </exercise>
    </section>
    </content> 
    </document>